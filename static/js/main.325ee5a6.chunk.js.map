{"version":3,"sources":["../node_modules/@aws-amplify/ui-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","components/Header.js","components/tables/AddNotice.js","components/tables/Notice.js","graphql/queries.js","graphql/mutations.js","components/tables/Homework.js","components/tables/Timetable.js","components/TableNavigation.js","aws-exports.js","App.js","reportWebVitals.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Header","className","AddNotice","props","Dialog","fullWidth","maxWidth","open","aria-labelledby","DialogTitle","DialogContent","TextField","label","variant","onChange","setName","multiline","rows","defaultValue","setData","DialogActions","Button","onClick","handleClose","color","handleAdd","memo","Notice","useState","openNotice","setOpenNotice","nameInput","dataInput","dbRowID","setDbRowID","noticeJSON","setNoticeJSON","edit","setEdit","name","data","updateObj","setUpdateObj","GetNotices","a","API","graphql","graphqlOperation","filter","year_group","eq","response","noticeList","listNotices","items","notices","console","log","useEffect","handleUpdate","text","field","tempUpdate","colSpan","input","catch","err","finally","style","width","message","cellID","onDoubleClick","rowID","cell","push","toString","time","SaveEdit","event","target","value","EditRow","timeInput","Date","toLocaleString","newNotice","unshift","indexNotices","Homework","homeworkJSON","sethomeworkJSON","GetHomework","homeworkList","listHomework","homework","Timetable","timetableJSON","setTimetableJSON","GetTimetable","timetableList","listTimetables","tables","TableNavigation","yearGroup","setYearGroup","title","setTitle","displayTable","yearNumber","allYears","year","backgroundColor","allTableNames","Table","awsmobile","Amplify","configure","awsconfig","withAuthenticator","userInfo_","setUserInfo","Auth","currentUserInfo","user","getUser","signOut","undefined","attributes","sub","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.325ee5a6.chunk.js","sourcesContent":["var map = {\n\t\"./amplify-amazon-button_5.entry.js\": [\n\t\t251,\n\t\t16\n\t],\n\t\"./amplify-auth-container.entry.js\": [\n\t\t252,\n\t\t17\n\t],\n\t\"./amplify-auth-fields_9.entry.js\": [\n\t\t253,\n\t\t18\n\t],\n\t\"./amplify-authenticator.entry.js\": [\n\t\t254,\n\t\t5\n\t],\n\t\"./amplify-button_3.entry.js\": [\n\t\t255,\n\t\t19\n\t],\n\t\"./amplify-chatbot.entry.js\": [\n\t\t256,\n\t\t4\n\t],\n\t\"./amplify-checkbox.entry.js\": [\n\t\t257,\n\t\t20\n\t],\n\t\"./amplify-confirm-sign-in_7.entry.js\": [\n\t\t258,\n\t\t6\n\t],\n\t\"./amplify-container.entry.js\": [\n\t\t259,\n\t\t21\n\t],\n\t\"./amplify-federated-buttons_2.entry.js\": [\n\t\t260,\n\t\t22\n\t],\n\t\"./amplify-federated-sign-in.entry.js\": [\n\t\t261,\n\t\t23\n\t],\n\t\"./amplify-form-field_4.entry.js\": [\n\t\t262,\n\t\t24\n\t],\n\t\"./amplify-greetings.entry.js\": [\n\t\t263,\n\t\t25\n\t],\n\t\"./amplify-icon-button.entry.js\": [\n\t\t264,\n\t\t26\n\t],\n\t\"./amplify-icon.entry.js\": [\n\t\t265,\n\t\t7\n\t],\n\t\"./amplify-link.entry.js\": [\n\t\t266,\n\t\t27\n\t],\n\t\"./amplify-nav_2.entry.js\": [\n\t\t267,\n\t\t28\n\t],\n\t\"./amplify-photo-picker.entry.js\": [\n\t\t268,\n\t\t29\n\t],\n\t\"./amplify-picker.entry.js\": [\n\t\t269,\n\t\t30\n\t],\n\t\"./amplify-radio-button_3.entry.js\": [\n\t\t270,\n\t\t8\n\t],\n\t\"./amplify-s3-album.entry.js\": [\n\t\t271,\n\t\t9\n\t],\n\t\"./amplify-s3-image-picker.entry.js\": [\n\t\t272,\n\t\t10\n\t],\n\t\"./amplify-s3-image.entry.js\": [\n\t\t273,\n\t\t11\n\t],\n\t\"./amplify-s3-text-picker.entry.js\": [\n\t\t274,\n\t\t12\n\t],\n\t\"./amplify-s3-text.entry.js\": [\n\t\t275,\n\t\t13\n\t],\n\t\"./amplify-select-mfa-type.entry.js\": [\n\t\t276,\n\t\t31\n\t],\n\t\"./amplify-sign-in-button.entry.js\": [\n\t\t277,\n\t\t14\n\t],\n\t\"./amplify-tooltip.entry.js\": [\n\t\t278,\n\t\t32\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 187;\nmodule.exports = webpackAsyncContext;","import './components.css';\r\nimport { AmplifySignOut } from '@aws-amplify/ui-react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"main-header\">\r\n      <div className=\"header-title\"> \r\n        <h1>KTC Management Tool</h1>\r\n\r\n      </div>\r\n      <div className=\"header-signout\"> \r\n        <AmplifySignOut />\r\n      </div>\r\n\r\n\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n// import DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { memo } from 'react';\r\nimport './tables.css';\r\n\r\nconst AddNotice = (props) => {\r\n\r\n    // const handleName = event => {\r\n    //     console.log(event.target.value)\r\n    //     props.setName(event.target.value);\r\n    // };\r\n\r\n    // const handleData = event => {\r\n    //     console.log(event.target.value)\r\n    //     // setData(event.target.value);\r\n    // };\r\n\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"sm\" open={props.open} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Add Notice</DialogTitle>\r\n            <DialogContent>\r\n                {/* <DialogContentText>\r\n                    Enter notice details:\r\n                </DialogContentText> */}\r\n                <div className=\"form-container\">\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Name\" \r\n                        variant=\"outlined\" \r\n                        onChange={props.setName}\r\n                    />\r\n                    <TextField\r\n                        id=\"outlined-multiline-static\"\r\n                        label=\"Data\"\r\n                        multiline\r\n                        rows={4}\r\n                        defaultValue=\"\"\r\n                        variant=\"outlined\"\r\n                        onChange={props.setData}\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={props.handleAdd} color=\"primary\">\r\n                    Add\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n    \r\n}\r\n\r\nexport default memo(AddNotice);","import './tables.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport { listNotices } from '../../graphql/queries';\r\nimport { createNotice, updateNotice } from '../../graphql/mutations';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport AddNotice from './AddNotice'\r\n\r\nconst Notice = (props) => {\r\n    const [openNotice, setOpenNotice] = useState(false);\r\n\r\n    const [nameInput, setName] = useState(\"\");\r\n    const [dataInput, setData] = useState(\"\");\r\n    const [dbRowID, setDbRowID] = useState(\"\");\r\n    const [noticeJSON, setNoticeJSON] = useState([]);\r\n    const [edit, setEdit] = useState(null);\r\n    const [updateObj, setUpdateObj] = useState({\r\n            name: \"\",\r\n            data: \"\"\r\n    });\r\n\r\n    const GetNotices = async() => {\r\n        try {\r\n            const response = (await API.graphql(graphqlOperation(listNotices, {\r\n                filter: {\r\n                    year_group: {\r\n                            eq: props.year_group\r\n                    }\r\n                }\r\n            })));\r\n            // console.log(\"response\",response.data)\r\n            const noticeList = response.data.listNotices.items[0].notices; \r\n            setDbRowID(response.data.listNotices.items[0].id);\r\n            // console.log(noticeList)\r\n            setNoticeJSON(noticeList);\r\n\r\n        } catch(e) {\r\n            console.log(\"error fetching data: \",e);\r\n        }\r\n\r\n    }\r\n \r\n    const EditRow = (rowID) => {\r\n        console.log(\"make changes\", rowID)\r\n        setEdit(rowID);\r\n        const tempUpdate = { name:noticeJSON[rowID].name, data:noticeJSON[rowID].data }\r\n        setUpdateObj(tempUpdate);\r\n    }\r\n\r\n    const SaveEdit = (rowID) => {\r\n        console.log(\"made changes\", updateObj)\r\n        const tempUpdate = [];\r\n        Object.keys(noticeJSON).map((cell) => {\r\n                console.log(cell, rowID)\r\n\r\n                if (cell === rowID) {\r\n                    console.log(updateObj.name)\r\n                    if (updateObj.name !== \"\") {   // only add the data if the notice has a name\r\n                        tempUpdate.push({cellID:cell.toString(), name:updateObj.name, data: updateObj.data, time: noticeJSON[cell].time})\r\n                    }\r\n                } else {\r\n                    tempUpdate.push({cellID:cell.toString(), name:noticeJSON[cell].name, data: noticeJSON[cell].data, time: noticeJSON[cell].time})\r\n                }\r\n                return <></>\r\n            }\r\n        )\r\n        setNoticeJSON(tempUpdate, setEdit(null) );\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetNotices();\r\n    }, []);\r\n\r\n    const handleName = event => {\r\n        setName(event.target.value);\r\n    };\r\n\r\n    const handleData = event => {\r\n        setData(event.target.value);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenNotice(true)    \r\n        // console.log(noticeDisplay)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpenNotice(false)    \r\n    };\r\n\r\n    const handleUpdate = (text, field) => {\r\n        console.log(text, \" \", field)\r\n        let tempUpdate = updateObj;\r\n        if (field === \"n\") {\r\n            tempUpdate.name = text;\r\n\r\n        } else if (field === \"d\") {\r\n\r\n            tempUpdate.data = text;\r\n        }\r\n        setUpdateObj(tempUpdate)\r\n\r\n    };\r\n\r\n    const handleAdd = () => {\r\n        // console.log(noticeJSON)\r\n        const timeInput = new Date().toLocaleString();\r\n        // console.log(typeof(timeInput))\r\n        const newNotice = {cellID:\"x\", name:nameInput, data:dataInput, time:timeInput};\r\n        noticeJSON.unshift(newNotice);\r\n\r\n        const indexNotices = [];\r\n        Object.keys(noticeJSON).map((cell) => {\r\n                indexNotices.push({cellID:cell.toString(), name:noticeJSON[cell].name, data: noticeJSON[cell].data, time: noticeJSON[cell].time})\r\n                return <></>\r\n            }\r\n        )\r\n        setNoticeJSON(indexNotices, handleClose() );\r\n    };\r\n\r\n    const confirmChanges = () => {\r\n        // indexNotices()\r\n        API.graphql(graphqlOperation(updateNotice, {input: {id:dbRowID, notices:noticeJSON}}))\r\n        .catch((err) => console.log(\"Error saving changes: \", err))\r\n        .finally(() => console.log(\"changes saved\"));\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"display-table-container\" >\r\n                <table className=\"display-table\">\r\n                    <tr className=\"table-header\">\r\n                        <td className=\"table-title\" colSpan=\"2\"> <h2>Notice Table</h2> </td>\r\n                        <td>\r\n                            <button className=\"table-save\" className=\"row-buttons-save\" onClick={confirmChanges}> Save </button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr className=\"second-notices\">\r\n                        <td colSpan=\"3\">\r\n                            <button className=\"add-button\" onClick={handleClickOpen}> Add Notice + </button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr className=\"display-titles\">\r\n                        <th style={{width: \"20%\"}}>\r\n                            Title\r\n                        </th>\r\n                        <th>\r\n                            Message\r\n                        </th>\r\n                        <th>\r\n                            Date sent\r\n                        </th>\r\n                    </tr>\r\n                    {/* < FormatNotice /> */}\r\n                    {/* {noticeDisplay} */}\r\n                    {noticeJSON.map((message) => {\r\n                        if (edit === message.cellID) {\r\n                            return <tr onDoubleClick={() => SaveEdit(message.cellID)} key={message.cellID} className=\"all-row-data\" >\r\n                                <td> \r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Name\"\r\n                                        fullWidth \r\n                                        multiline\r\n                                        rows={4}\r\n                                        defaultValue={message.name}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(event) => handleUpdate(event.target.value, \"n\" )}\r\n                                    /> \r\n                                </td>\r\n                                <td> \r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Data\"\r\n                                        fullWidth \r\n                                        multiline\r\n                                        rows={4}\r\n                                        defaultValue={message.data}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(event) => handleUpdate(event.target.value, \"d\" )}\r\n                                    />  \r\n                                </td>\r\n                                <td> {message.time} </td>\r\n                            </tr>\r\n                        } else {\r\n                            return <tr onDoubleClick={() => EditRow(message.cellID)} key={message.cellID} className=\"all-row-data\" >\r\n                                <td> {message.name} </td>\r\n                                <td> {message.data} </td>\r\n                                <td> {message.time} </td>\r\n                            </tr> \r\n                        }\r\n                    })}\r\n                </table>\r\n            </div>\r\n            <AddNotice open={openNotice} handleClose={handleClose} handleAdd={handleAdd} setName={handleName} setData={handleData}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Notice;","/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const getNotice = /* GraphQL */ `\r\n  query GetNotice($id: ID!) {\r\n    getNotice(id: $id) {\r\n      id\r\n      year_group\r\n      notices {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const listNotices = /* GraphQL */ `\r\n  query ListNotices(\r\n    $filter: ModelNoticeFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    listNotices(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n      items {\r\n        id\r\n        year_group\r\n        notices {\r\n          cellID\r\n          name\r\n          time\r\n          data\r\n        }\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\nexport const getTimetable = /* GraphQL */ `\r\n  query GetTimetable($id: ID!) {\r\n    getTimetable(id: $id) {\r\n      id\r\n      year_group\r\n      tables {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const listTimetables = /* GraphQL */ `\r\n  query ListTimetables(\r\n    $filter: ModelTimetableFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    listTimetables(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n      items {\r\n        id\r\n        year_group\r\n        tables {\r\n          cellID\r\n          name\r\n          time\r\n          data\r\n        }\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\nexport const getHomework = /* GraphQL */ `\r\n  query GetHomework($id: ID!) {\r\n    getHomework(id: $id) {\r\n      id\r\n      year_group\r\n      homework {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const listHomework = /* GraphQL */ `\r\n  query ListHomework(\r\n    $filter: ModelHomeworkFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    listHomework(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n      items {\r\n        id\r\n        year_group\r\n        homework {\r\n          cellID\r\n          name\r\n          time\r\n          data\r\n        }\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\n","/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const createNotice = /* GraphQL */ `\r\n  mutation CreateNotice(\r\n    $input: CreateNoticeInput!\r\n    $condition: ModelNoticeConditionInput\r\n  ) {\r\n    createNotice(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      notices {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const updateNotice = /* GraphQL */ `\r\n  mutation UpdateNotice(\r\n    $input: UpdateNoticeInput!\r\n    $condition: ModelNoticeConditionInput\r\n  ) {\r\n    updateNotice(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      notices {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const deleteNotice = /* GraphQL */ `\r\n  mutation DeleteNotice(\r\n    $input: DeleteNoticeInput!\r\n    $condition: ModelNoticeConditionInput\r\n  ) {\r\n    deleteNotice(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      notices {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const createTimetable = /* GraphQL */ `\r\n  mutation CreateTimetable(\r\n    $input: CreateTimetableInput!\r\n    $condition: ModelTimetableConditionInput\r\n  ) {\r\n    createTimetable(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      tables {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const updateTimetable = /* GraphQL */ `\r\n  mutation UpdateTimetable(\r\n    $input: UpdateTimetableInput!\r\n    $condition: ModelTimetableConditionInput\r\n  ) {\r\n    updateTimetable(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      tables {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const deleteTimetable = /* GraphQL */ `\r\n  mutation DeleteTimetable(\r\n    $input: DeleteTimetableInput!\r\n    $condition: ModelTimetableConditionInput\r\n  ) {\r\n    deleteTimetable(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      tables {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const createHomework = /* GraphQL */ `\r\n  mutation CreateHomework(\r\n    $input: CreateHomeworkInput!\r\n    $condition: ModelHomeworkConditionInput\r\n  ) {\r\n    createHomework(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      homework {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const updateHomework = /* GraphQL */ `\r\n  mutation UpdateHomework(\r\n    $input: UpdateHomeworkInput!\r\n    $condition: ModelHomeworkConditionInput\r\n  ) {\r\n    updateHomework(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      homework {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const deleteHomework = /* GraphQL */ `\r\n  mutation DeleteHomework(\r\n    $input: DeleteHomeworkInput!\r\n    $condition: ModelHomeworkConditionInput\r\n  ) {\r\n    deleteHomework(input: $input, condition: $condition) {\r\n      id\r\n      year_group\r\n      homework {\r\n        cellID\r\n        name\r\n        time\r\n        data\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n","import './tables.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport { listHomework } from '../../graphql/queries';\r\nimport { updateHomework } from '../../graphql/mutations';\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\nconst Homework = (props) => {\r\n\r\n    const [dbRowID, setDbRowID] = useState(\"\");\r\n    const [homeworkJSON, sethomeworkJSON] = useState([]);\r\n    const [edit, setEdit] = useState(null);\r\n    const [updateObj, setUpdateObj] = useState({\r\n            name: \"\",\r\n            data: \"\"\r\n    });\r\n\r\n    const GetHomework = async() => {\r\n        try {\r\n            const response = (await API.graphql(graphqlOperation(listHomework, {\r\n                filter: {\r\n                    year_group: {\r\n                            eq: props.year_group\r\n                    }\r\n                }\r\n            })));\r\n            // console.log(\"response\",response.data)\r\n            const homeworkList = response.data.listHomework.items[0].homework; \r\n            setDbRowID(response.data.listHomework.items[0].id);\r\n            // console.log(homeworkList)\r\n            sethomeworkJSON(homeworkList);\r\n\r\n        } catch(e) {\r\n            console.log(\"error fetching data: \",e);\r\n        }\r\n\r\n    }\r\n \r\n    const EditRow = (rowID) => {\r\n        console.log(\"make changes\", rowID)\r\n        setEdit(rowID);\r\n        const tempUpdate = { name:homeworkJSON[rowID].name, data:homeworkJSON[rowID].data }\r\n        setUpdateObj(tempUpdate);\r\n    }\r\n\r\n    const SaveEdit = (rowID) => {\r\n        console.log(\"made changes\", updateObj)\r\n        const tempUpdate = [];\r\n        Object.keys(homeworkJSON).map((cell) => {\r\n                // console.log(cell, rowID)\r\n\r\n                if (cell === rowID) {\r\n                    // console.log(updateObj.name)\r\n                    if (updateObj.name !== \"\") {   // only add the data if the homework has a name\r\n                        tempUpdate.push({cellID:cell.toString(), name:updateObj.name, data: updateObj.data, time: homeworkJSON[cell].time})\r\n                    }\r\n                } else {\r\n                    tempUpdate.push({cellID:cell.toString(), name:homeworkJSON[cell].name, data: homeworkJSON[cell].data, time: homeworkJSON[cell].time})\r\n                }\r\n                return <></>\r\n            }\r\n        )\r\n        sethomeworkJSON(tempUpdate, setEdit(null) );\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetHomework();\r\n    }, []);\r\n\r\n    const handleUpdate = (text, field) => {\r\n        console.log(text, \" \", field)\r\n        let tempUpdate = updateObj;\r\n        if (field === \"n\") {\r\n            tempUpdate.name = text;\r\n\r\n        } else if (field === \"d\") {\r\n\r\n            tempUpdate.data = text;\r\n        }\r\n        setUpdateObj(tempUpdate)\r\n\r\n    };\r\n\r\n\r\n    const confirmChanges = () => {\r\n        API.graphql(graphqlOperation(updateHomework, {input: {id:dbRowID, homework:homeworkJSON}}))\r\n        .catch((err) => console.log(\"Error saving changes: \", err))\r\n        .finally(() =>  console.log(\"changes saved\"));\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"display-table-container\" >\r\n                <table className=\"display-table\">\r\n                    <tr className=\"table-header\">\r\n                        <td className=\"table-title\" colSpan=\"2\"> <h2>Homework Table</h2> </td>\r\n                        <td>\r\n                            <button className=\"table-save\" className=\"row-buttons-save\" onClick={confirmChanges}> Save </button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr className=\"display-titles\">\r\n                        <th style={{width: \"20%\"}}>\r\n                            Title\r\n                        </th>\r\n                        <th>\r\n                            Message\r\n                        </th>\r\n                        <th>\r\n                            Date sent\r\n                        </th>\r\n                    </tr>\r\n                    {homeworkJSON.map((message) => {\r\n                        if (edit === message.cellID) {\r\n                            return <tr onDoubleClick={() => SaveEdit(message.cellID)} key={message.cellID} className=\"all-row-data\" >\r\n                                <td> \r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Name\"\r\n                                        fullWidth \r\n                                        multiline\r\n                                        rows={4}\r\n                                        defaultValue={message.name}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(event) => handleUpdate(event.target.value, \"n\" )}\r\n                                    /> \r\n                                </td>\r\n                                <td> \r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Data\"\r\n                                        fullWidth \r\n                                        multiline\r\n                                        rows={4}\r\n                                        defaultValue={message.data}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(event) => handleUpdate(event.target.value, \"d\" )}\r\n                                    />  \r\n                                </td>\r\n                                <td> {message.time} </td>\r\n                            </tr>\r\n                        } else {\r\n                            return <tr onDoubleClick={() => EditRow(message.cellID)} key={message.cellID} className=\"all-row-data\" >\r\n                                <td> {message.name} </td>\r\n                                <td> {message.data} </td>\r\n                                <td> {message.time} </td>\r\n                            </tr> \r\n                        }\r\n                    })}\r\n                </table>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Homework;","import './tables.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport { listTimetables } from '../../graphql/queries';\r\nimport { updateTimetable } from '../../graphql/mutations';\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\nconst Timetable = (props) => {\r\n\r\n    const [dbRowID, setDbRowID] = useState(\"\");\r\n    const [timetableJSON, setTimetableJSON] = useState([]);\r\n    const [edit, setEdit] = useState(null);\r\n    const [updateObj, setUpdateObj] = useState({\r\n            name: \"\",\r\n            data: \"\"\r\n    });\r\n\r\n    const GetTimetable = async() => {\r\n        try {\r\n            const response = (await API.graphql(graphqlOperation(listTimetables, {\r\n                filter: {\r\n                    year_group: {\r\n                            eq: props.year_group\r\n                    }\r\n                }\r\n            })));\r\n            // console.log(\"response\",response.data)\r\n            const timetableList = response.data.listTimetables.items[0].tables; \r\n            setDbRowID(response.data.listTimetables.items[0].id);\r\n            // console.log(timetableList)\r\n            setTimetableJSON(timetableList);\r\n\r\n        } catch(e) {\r\n            console.log(\"error fetching data: \",e);\r\n        }\r\n\r\n    }\r\n \r\n    const EditRow = (rowID) => {\r\n        console.log(\"make changes\", rowID)\r\n        setEdit(rowID);\r\n        const tempUpdate = { name:timetableJSON[rowID].name, data:timetableJSON[rowID].data }\r\n        setUpdateObj(tempUpdate);\r\n    }\r\n\r\n    const SaveEdit = (rowID) => {\r\n        console.log(\"made changes\", updateObj)\r\n        const tempUpdate = [];\r\n        Object.keys(timetableJSON).map((cell) => {\r\n                // console.log(cell, rowID)\r\n\r\n                if (cell === rowID) {\r\n                    // console.log(updateObj.name)\r\n                    if (updateObj.name !== \"\") {   // only add the data if the timetable has a name\r\n                        tempUpdate.push({cellID:cell.toString(), name:updateObj.name, data: updateObj.data, time: timetableJSON[cell].time})\r\n                    }\r\n                } else {\r\n                    tempUpdate.push({cellID:cell.toString(), name:timetableJSON[cell].name, data: timetableJSON[cell].data, time: timetableJSON[cell].time})\r\n                }\r\n                return <></>\r\n            }\r\n        )\r\n        setTimetableJSON(tempUpdate, setEdit(null) );\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetTimetable();\r\n    }, []);\r\n\r\n    const handleUpdate = (text, field) => {\r\n        console.log(text, \" \", field)\r\n        let tempUpdate = updateObj;\r\n        if (field === \"n\") {\r\n            tempUpdate.name = text;\r\n\r\n        } else if (field === \"d\") {\r\n\r\n            tempUpdate.data = text;\r\n        }\r\n        setUpdateObj(tempUpdate)\r\n\r\n    };\r\n\r\n\r\n    const confirmChanges = () => {\r\n        API.graphql(graphqlOperation(updateTimetable, {input: {id:dbRowID, tables:timetableJSON}}))\r\n        .catch((err) => console.log(\"Error saving changes: \", err))\r\n        .finally(() =>  console.log(\"changes saved\"));\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"display-table-container\" >\r\n                <table className=\"display-table\">\r\n                    <tr className=\"table-header\">\r\n                        <td className=\"table-title\" colSpan=\"2\"> <h2>Timetables</h2> </td>\r\n                        <td>\r\n                            <button className=\"table-save\" className=\"row-buttons-save\" onClick={confirmChanges}> Save </button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr className=\"display-titles\">\r\n                        <th style={{width: \"20%\"}}>\r\n                            Title\r\n                        </th>\r\n                        <th>\r\n                            Message\r\n                        </th>\r\n                        <th>\r\n                            Date sent\r\n                        </th>\r\n                    </tr>\r\n                    {timetableJSON.map((message) => {\r\n                        if (edit === message.cellID) {\r\n                            return <tr onDoubleClick={() => SaveEdit(message.cellID)} key={message.cellID} className=\"all-row-data\" >\r\n                                <td> \r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Name\"\r\n                                        fullWidth \r\n                                        multiline\r\n                                        rows={4}\r\n                                        defaultValue={message.name}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(event) => handleUpdate(event.target.value, \"n\" )}\r\n                                    /> \r\n                                </td>\r\n                                <td> \r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Data\"\r\n                                        fullWidth \r\n                                        multiline\r\n                                        rows={4}\r\n                                        defaultValue={message.data}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(event) => handleUpdate(event.target.value, \"d\" )}\r\n                                    />  \r\n                                </td>\r\n                                <td> {message.time} </td>\r\n                            </tr>\r\n                        } else {\r\n                            return <tr onDoubleClick={() => EditRow(message.cellID)} key={message.cellID} className=\"all-row-data\" >\r\n                                <td> {message.name} </td>\r\n                                <td> {message.data} </td>\r\n                                <td> {message.time} </td>\r\n                            </tr> \r\n                        }\r\n                    })}\r\n                </table>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Timetable;","import './components.css';\r\n\r\nimport { useState } from 'react';\r\n\r\nimport Notice from './tables/Notice'\r\nimport Homework from './tables/Homework'\r\nimport Timetable from './tables/Timetable'\r\n\r\n\r\nconst TableNavigation = () => {\r\n\r\n    const [yearGroup, setYearGroup] = useState(1);\r\n    const [title, setTitle] = useState(\"Notice\");\r\n\r\n\r\n    const displayTable = (yearNumber) => {\r\n        console.log(yearNumber, title);\r\n        setYearGroup(yearNumber)\r\n    }\r\n\r\n    const years = [1,2,3,4,5,6,7,8,9,10,11]\r\n    const allYears = years.map( (year) => {\r\n        if (year === yearGroup) {\r\n            return (\r\n                <td key={year} className=\"row-items\">\r\n                    <button style={{backgroundColor: \"#50eb79\"}}\r\n                        className=\"row-buttons\" \r\n                        onClick={() => displayTable(year)}> Year {year} \r\n                    </button>\r\n                </td>)\r\n        } else {\r\n            return (\r\n            <td key={year} className=\"row-items\">\r\n                <button \r\n                    className=\"row-buttons\" \r\n                    onClick={() => displayTable(year)}> Year {year} \r\n                </button>\r\n            </td>)\r\n        }})\r\n\r\n    const tableNames = [\"Notice\", \"Timetable\", \"Homework\"]\r\n\r\n    const allTableNames = tableNames.map( (name) => {\r\n        if (name === title) {\r\n            return (\r\n                <button key={name} style={{backgroundColor: \"#50eb79\"}} onClick={() => setTitle(name)}>{name}</button>\r\n            )\r\n        } else {\r\n            return (\r\n                <button key={name} onClick={() => setTitle(name)}>{name}</button>\r\n            )\r\n        }})\r\n\r\n    const Table = () => {\r\n        if (title === \"Notice\") {\r\n            return <Notice year_group={yearGroup} />;\r\n        } else if (title === \"Timetable\") {\r\n            return <Timetable year_group={yearGroup} />;\r\n        } else if (title === \"Homework\") {\r\n            return <Homework year_group={yearGroup} />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <table className=\"main-table\">\r\n                <tbody>\r\n                    <tr className=\"main-row\">\r\n                        { allYears }\r\n                    </tr>\r\n                </tbody>\r\n\r\n                <tr className=\"table-nav\">\r\n                    <td>\r\n                        {allTableNames}\r\n                \r\n                    </td>\r\n\r\n                </tr>\r\n                \r\n                \r\n            </table>\r\n            <Table />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TableNavigation;","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"eu-west-2\",\n    \"aws_cognito_identity_pool_id\": \"eu-west-2:19803987-6272-4845-b7dd-a0113a46f275\",\n    \"aws_cognito_region\": \"eu-west-2\",\n    \"aws_user_pools_id\": \"eu-west-2_Ox0fmTLQ9\",\n    \"aws_user_pools_web_client_id\": \"7fcjn0sbnuh3dn0ephin3qlhdp\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://f7m2imxxtzffpbhvd7ift5dd2y.appsync-api.eu-west-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"eu-west-2\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\"\n};\n\n\nexport default awsmobile;\n","import './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport {Header, TableNavigation} from './components'\r\nimport { withAuthenticator } from '@aws-amplify/ui-react';\r\nimport Amplify, { Auth } from 'aws-amplify';\r\nimport awsconfig from './aws-exports';\r\nAmplify.configure(awsconfig);\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [userInfo_, setUserInfo] = useState()\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getUser = async () => {\r\n\t\t\tawait Auth.currentUserInfo()\r\n\t\t\t.then((user) => setUserInfo(user))\r\n\t\t\t.catch((err) => console.log(\"error getting details\", err))\r\n\t\t}\r\n\t\tgetUser()\r\n\t}, [])\r\n\r\n  const signOut = async () => {\r\n\t\ttry {\r\n\t\t\tawait Auth.signOut();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('error signing out: ', error);\r\n\t\t}\r\n\t}\r\n\r\n  if (userInfo_ !== undefined) {\r\n    return (\r\n      <div className=\"App\">\r\n        { userInfo_.attributes.sub === \"09f70b2f-7b02-4890-a64d-1208f972d85b\"\r\n        ? <> <Header />\r\n          <TableNavigation /> </>\r\n        : <> <p> Please sign into the app instead</p> \r\n          <button onClick={signOut}> Signout </button> </>\r\n        }\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>Loading</p>\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default withAuthenticator(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}